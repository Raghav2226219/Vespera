generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  name         String
  phonenumber  String
  password     String
  role         Role     @default(Viewer)
  createdAt    DateTime @default(now())
  refreshToken String?

  Profile Profile?
  BoardMember BoardMember[]
  Board Board[]

  inviterLogs InviteLog[] @relation("InviterLogs")
  acceptedLogs InviteLog[] @relation("AcceptedLogs")
}

enum Role {
  Admin
  Owner
  Editor
  Viewer
}

model Profile{
  id Int @id @default(autoincrement())
  userId Int @unique
  name String
  phoneNumber String
  dob DateTime?
  gender Gender
  address String?
  bio String?
  profilePic String?

  user User @relation(fields: [userId], references: [id])
}

enum Gender{
  Male
  Female
  Other
}

model Board {
  id Int @id @default(autoincrement())
  title String
  description String?
  isArchived Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ownerId Int
  owner User @relation(fields: [ownerId], references: [id])

  members BoardMember[]
  invites Invite[]
  logs InviteLog[]

  @@unique([ownerId, title])
}

model BoardMember{
  id Int @id @default(autoincrement())
  boardId Int
  userId Int
  role Role @default(Viewer)
  joinedAt DateTime @default(now())

  board Board @relation(fields: [boardId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id])

  @@unique([boardId, userId])
}

model Invite {
  id Int @id @default(autoincrement())
  boardId Int
  email String
  role Role @default(Viewer)
  tokenHash String @unique
  expiresAt DateTime
  used Boolean @default(false)
  createdAt DateTime @default(now())
  cancelled Boolean @default(false)
  cancelledAt DateTime?

  board Board @relation(fields: [boardId], references: [id], onDelete: Cascade)
  logs InviteLog[]

  @@index([boardId])
  @@index([email])
}

model InviteLog {
  id Int @id @default(autoincrement())
  boardId Int
  inviteId Int
  inviterId Int
  acceptedById Int?
  inviteeEmail String
  action InviteAction
  createdAt DateTime @default(now())

  board Board @relation(fields: [boardId], references: [id])
  invite Invite @relation(fields: [inviteId], references: [id])
  inviter User @relation("InviterLogs",fields: [inviterId], references: [id])
  acceptedBy User? @relation("AcceptedLogs", fields: [acceptedById], references: [id])

  @@index([boardId])
  @@index([inviterId])
  @@index([acceptedById])
}

enum InviteAction{
  SENT
  ACCEPTED
  CANCELLED
  SUSPICIOUS
  PENDING
}