generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  name         String
  phonenumber  String
  password     String
  role         Role     @default(Viewer)
  createdAt    DateTime @default(now())
  refreshToken String?

  Profile     Profile?
  BoardMember BoardMember[]
  Board       Board[]

  inviterLogs   InviteLog[] @relation("InviterLogs")
  acceptedLogs  InviteLog[] @relation("AcceptedLogs")

  // relation fields for audits (boards they archived/trashed)
  archivedBoards Board[] @relation("ArchivedBy")
  trashedBoards  Board[] @relation("TrashedBy")
  boardAudits    BoardAudit[] @relation("ActorAudits")
}

enum Role {
  Admin
  Owner
  Editor
  Viewer
}

model Profile {
  id          Int       @id @default(autoincrement())
  userId      Int       @unique
  name        String
  phoneNumber String
  dob         DateTime?
  gender      Gender
  address     String?
  bio         String?
  profilePic  String?

  user User @relation(fields: [userId], references: [id])
}

enum Gender {
  Male
  Female
  Other
}

enum BoardStatus {
  active
  archived
  trashed
}

model Board {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  status      BoardStatus @default(active)   // active | archived | trashed
  archivedAt  DateTime?                         // when archived
  trashedAt   DateTime?                         // when moved to trash
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  ownerId Int
  owner   User @relation(fields: [ownerId], references: [id])

  // who archived / trashed (optional)
  archivedById Int? 
  archivedBy   User? @relation("ArchivedBy", fields: [archivedById], references: [id])
  trashedById  Int?
  trashedBy    User? @relation("TrashedBy", fields: [trashedById], references: [id])

  members BoardMember[]
  invites Invite[]
  logs    InviteLog[]
  columns Column[]

  audits  BoardAudit[]  @relation("BoardAudits")

  @@unique([ownerId, title])
  @@index([status])
  @@index([trashedAt])
}

model BoardMember {
  id       Int      @id @default(autoincrement())
  boardId  Int
  userId   Int
  role     Role     @default(Viewer)
  joinedAt DateTime @default(now())

  board Board @relation(fields: [boardId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id])

  @@unique([boardId, userId])
}

model Invite {
  id          Int       @id @default(autoincrement())
  boardId     Int
  email       String
  role        Role      @default(Viewer)
  tokenHash   String    @unique
  expiresAt   DateTime
  used        Boolean   @default(false)
  createdAt   DateTime  @default(now())
  cancelled   Boolean   @default(false)
  cancelledAt DateTime?

  board Board       @relation(fields: [boardId], references: [id], onDelete: Cascade)
  logs  InviteLog[]

  @@index([boardId])
  @@index([email])
}

model InviteLog {
  id           Int          @id @default(autoincrement())
  boardId      Int
  inviteId     Int
  inviterId    Int
  acceptedById Int?
  inviteeEmail String
  action       InviteAction
  createdAt    DateTime     @default(now())

  board      Board  @relation(fields: [boardId], references: [id])
  invite     Invite @relation(fields: [inviteId], references: [id])
  inviter    User   @relation("InviterLogs", fields: [inviterId], references: [id])
  acceptedBy User?  @relation("AcceptedLogs", fields: [acceptedById], references: [id])

  @@index([boardId])
  @@index([inviterId])
  @@index([acceptedById])
}

enum InviteAction {
  SENT
  ACCEPTED
  CANCELLED
  SUSPICIOUS
  PENDING
}

model Column {
  id        Int      @id @default(autoincrement())
  name      String
  position  Int // Used to order columns (1=ToDo, 2=Doing, 3=Done)
  boardId   Int
  board     Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  tasks     Task[] // A column contains multiple tasks
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Task {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  position    Int
  columnId    Int
  column      Column   @relation(fields: [columnId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

/*
  BoardAudit - records actions taken on boards (archive, restore, trash, permanent_delete, auto_delete, etc.)
*/
model BoardAudit {
  id        Int      @id @default(autoincrement())
  boardId   Int
  actorId   Int?     // user who performed the action (nullable for system/cron auto-deletes)
  action    String   // e.g. "archive", "restore", "trash", "permanent_delete", "auto_delete"
  details   Json?    // optional JSON blob with reason, request metadata, etc.
  ip        String?  
  userAgent String?
  createdAt DateTime @default(now())

  board   Board @relation("BoardAudits", fields: [boardId], references: [id], onDelete: Cascade)
  actor   User? @relation("ActorAudits", fields: [actorId], references: [id])

  @@index([boardId])
  @@index([actorId])
}
